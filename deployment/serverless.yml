service: go-clean-lambda

frameworkVersion: ">=3.0"

plugins:
  - serverless-deployment-bucket

custom:
  stage: ${opt:stage,'dev'}
  external: ${file(./output/configs/env.yml):${self:custom.stage}}
  region: ${self:custom.external.REGION}
  appCode: ${self:custom.external.APPCODE}
  variant: ${self:custom.external.VARIANT, ''}

provider:
  name: aws
  stage: ${self:custom.stage}${self:custom.variant}
  runtime: go1.x
  region: ${self:custom.region}
  versionFunctions: false
  deploymentBucket: 
    name: ${self:custom.external.AWS_DEPLOYMENT_BUCKET}
  stackName: ${self:custom.stage}-${self:custom.variant}-${self:service}
  iam:
    role: LambdaExecutionRole
  httpApi:
    name: ${self:custom.stage}-${self:custom.variant}-${self:service}
    cors: false
  timeout: 30
  memorySize: 512
  environment: ${file(./output/configs/env.yml):${self:custom.stage}}

package:
  artifact: output.zip

functions:
  dummy:
    name: ${self:custom.stage}-${self:custom.variant}-${self:service}-dummy
    handler: bin/main
    events:
      - httpApi:
          method: "*"
          path: /api/dummy
      - httpApi:
          method: "*"
          path: /api/dummy/{proxy+}
    reservedConcurrency: 1 # test only
    tags:
      stage: ${self:custom.stage}
      appcode: ${self:custom.appCode}

resources:
  Resources:
    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub "${self:custom.stage}-${self:custom.variant}-${self:custom.appCode}-lambda-role"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - !Ref LambdaExecutionLogPolicy
          - !Ref LambdaExecutionDynamoDBPolicy
          - !Ref LambdaExecutionApiGatewayPolicy
    LambdaExecutionLogPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: !Sub "${self:custom.stage}-${self:custom.variant}-${self:custom.appCode}-lambda-logs"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Effect: Allow
              Resource:
                - !Join
                  - ":"
                  - - "arn:aws:logs"
                    - "*"
                    - !Ref AWS::AccountId
                    - !Sub "/aws/elasticbeanstalk/${self:custom.stage}*"
                    - "*:*"
                - !Join
                  - ":"
                  - - "arn:aws:logs"
                    - "*"
                    - !Ref AWS::AccountId
                    - !Sub "log-group:/aws/elasticbeanstalk/${self:custom.stage}*"
                - !Join
                  - ":"
                  - - "arn:aws:logs:"
                    - !Ref AWS::Region
                    - ":"
                    - !Sub "/aws/lambda/${self:custom.stage}*"
                    - ":*:*"
                - !Join
                  - ":"
                  - - "arn:aws:logs"
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Sub "log-group:/aws/lambda/${self:custom.stage}*"
                - !Join
                  - ":"
                  - - "arn:aws:logs:"
                    - !Ref AWS::Region
                    - ":"
                    - !Sub "/aws/frontend/${self:custom.stage}*"
                    - ":*:*"
                - !Join
                  - ":"
                  - - "arn:aws:logs"
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Sub "log-group:/aws/frontend/${self:custom.stage}*"
                - !Join
                  - ":"
                  - - "arn:aws:logs"
                    - "*"
                    - !Ref AWS::AccountId
                    - !Sub "log-group:/aws/lambda/us-east-1.${self:custom.stage}*"
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource:
                - "*"
            - Effect: Allow
              Action:
                - firehose:PutRecord
                - firehose:PutRecordBatch
              Resource:
                - !Join
                  - ":"
                  - - "arn:aws:firehose"
                    - "*"
                    - !Ref AWS::AccountId
                    - !Sub "deliverystream/${self:custom.stage}*"
    LambdaExecutionDynamoDBPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: !Sub "${self:custom.stage}-${self:custom.variant}-${self:custom.appCode}-lambda-dynamodb"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - dynamodb:BatchGetItem
                - dynamodb:BatchWriteItem
                - dynamodb:PutItem
                - dynamodb:DescribeTable
                - dynamodb:DeleteItem
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:UpdateItem
                - dynamodb:ConditionCheckItem
              Effect: Allow
              Resource:
                - !Join
                  - ":"
                  - - "arn:aws:dynamodb"
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Sub "table/${self:custom.stage}*"
            - Action:
                - dynamodb:GetShardIterator
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
              Effect: Allow
              Resource:
                - !Join
                  - ":"
                  - - "arn:aws:dynamodb"
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Sub "table/${self:custom.stage}*/index/*"
                - !Join
                  - ":"
                  - - "arn:aws:dynamodb"
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Sub "table/${self:custom.stage}*/stream/*"
    LambdaExecutionApiGatewayPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: !Sub "${self:custom.stage}-${self:custom.variant}-${self:custom.appCode}-lambda-apigateway"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action: execute-api:ManageConnections
              Effect: Allow
              Resource:
                - !Join
                  - ":"
                  - - "arn:aws:execute-api"
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - "**/@connections/*"